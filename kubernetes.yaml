apiVersion: v1
kind: Service
metadata:
  name: elasticsearch
  labels:
    app: elasticsearch
    tier: backend
spec:
  ports:
  - port: 9200
    targetPort: 9200
  selector:
    app: elasticsearch
    tier: backend
---
apiVersion: apps/v1beta2 #  for k8s versions before 1.9.0 use apps/v1beta2beta2  and before 1.8.0 use extensions/v1beta1
kind: Deployment
metadata:
  name: elasticsearch
spec:
  selector:
    matchLabels:
      app: elasticsearch
      tier: backend
  replicas: 1
  template:
    metadata:
      labels:
        app: elasticsearch
        tier: backend
    spec:
      securityContext:
        fsGroup: 1000
      containers:
      - name: master
        image: docker.elastic.co/elasticsearch/elasticsearch:6.2.4
        resources:
          requests:
            cpu: 100m
            memory: 6Gi
          limits:
            memory: 6Gi
        env:
        - name: discovery.type
          value: single-node
        ports:
        - containerPort: 9200
        volumeMounts:
          - name: elasticsearch-persistent-storage
            mountPath: /usr/share/elasticsearch/data
      volumes:
        - name: elasticsearch-persistent-storage
          persistentVolumeClaim:
            claimName: elasticsearch-volumeclaim
---
apiVersion: v1
kind: Service
metadata:
  name: api
  labels:
    app: api
    tier: api
spec:
  type: NodePort
  ports:
  - port: 8000
  selector:
    app: api
    tier: api
---
apiVersion: apps/v1beta2 #  for k8s versions before 1.9.0 use apps/v1beta2beta2  and before 1.8.0 use extensions/v1beta1
kind: Deployment
metadata:
  name: api
spec:
  selector:
    matchLabels:
      app: api
      tier: api
  replicas: 3
  template:
    metadata:
      labels:
        app: api
        tier: api
    spec:
      containers:
      - name: api
        image: us.gcr.io/coral-mariner-201700/api:0.5
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
        env:
        - name: GET_HOSTS_FROM
          value: dns
          # If your cluster config does not include a dns service, then to
          # instead access environment variables to find service host
          # info, comment out the 'value: dns' line above, and uncomment the
          # line below:
          # value: env
        ports:
        - containerPort: 8000
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: elasticsearch-volumeclaim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 30Gi
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: api-ingress
spec:
  backend:
    serviceName: api
    servicePort: 8000
